"""nSettings configuration for the Sports Incident Analyzer.n"""nnimport osnfrom typing import Optionalnfrom pydantic import BaseSettings, Fieldnnnclass Settings(BaseSettings):n    """n    Application settings loaded from environment variables.n    n    This class defines all configuration settings for the application,n    with default values and validation.n    """n    n    # Databricks Configurationn    databricks_host: str = Field(..., env="DATABRICKS_HOST")n    databricks_token: str = Field(..., env="DATABRICKS_TOKEN")n    databricks_catalog: str = Field(..., env="DATABRICKS_CATALOG")n    databricks_schema: str = Field(..., env="DATABRICKS_SCHEMA")n    databricks_warehouse_id: Optional[str] = Field(None, env="DATABRICKS_WAREHOUSE_ID")n    n    # Database Tablesn    table_decision_result: str = Field("decision_result", env="TABLE_DECISION_RESULT")n    table_raw: str = Field("raw", env="TABLE_RAW")n    table_extracted: str = Field("extracted", env="TABLE_EXTRACTED")n    n    # Application Configurationn    log_level: str = Field("INFO", env="LOG_LEVEL")n    cache_enabled: bool = Field(True, env="CACHE_ENABLED")n    max_concurrent_queries: int = Field(10, env="MAX_CONCURRENT_QUERIES")n    n    # Analysis Configurationn    consensus_threshold: float = Field(0.8, env="CONSENSUS_THRESHOLD")n    min_providers_for_consensus: int = Field(3, env="MIN_PROVIDERS_FOR_CONSENSUS")n    n    # NLP Configurationn    nlp_model: str = Field("spacy", env="NLP_MODEL")n    nlp_language: str = Field("es", env="NLP_LANGUAGE")n    n    # Output Configurationn    output_format: str = Field("json", env="OUTPUT_FORMAT")n    include_metadata: bool = Field(True, env="INCLUDE_METADATA")n    n    # Performance Configurationn    query_timeout: int = Field(30, env="QUERY_TIMEOUT")n    max_retries: int = Field(3, env="MAX_RETRIES")n    retry_delay: float = Field(1.0, env="RETRY_DELAY")n    n    class Config:n        env_file = ".env"n        env_file_encoding = "utf-8"n        case_sensitive = Falsen    n    @classmethodn    def load(cls) -> "Settings":n        """n        Load settings from environment variables.n        n        Returns:n            Settings instance with loaded configurationn        """n        return cls()n    n    def validate(self) -> None:n        """n        Validate the configuration settings.n        n        Raises:n            ValueError: If any required settings are invalidn        """n        if not self.databricks_host:n            raise ValueError("DATABRICKS_HOST is required")n        if not self.databricks_token:n            raise ValueError("DATABRICKS_TOKEN is required")n        if not self.databricks_catalog:n            raise ValueError("DATABRICKS_CATALOG is required")n        if not self.databricks_schema:n            raise ValueError("DATABRICKS_SCHEMA is required")n        if self.consensus_threshold < 0.0 or self.consensus_threshold > 1.0:n            raise ValueError("CONSENSUS_THRESHOLD must be between 0.0 and 1.0")n        if self.min_providers_for_consensus < 1:n            raise ValueError("MIN_PROVIDERS_FOR_CONSENSUS must be at least 1")n        if self.max_concurrent_queries < 1:n            raise ValueError("MAX_CONCURRENT_QUERIES must be at least 1")n        if self.query_timeout < 1:n            raise ValueError("QUERY_TIMEOUT must be at least 1 second")n        if self.max_retries < 0:n            raise ValueError("MAX_RETRIES must be non-negative")n        if self.retry_delay < 0.0:n            raise ValueError("RETRY_DELAY must be non-negative")