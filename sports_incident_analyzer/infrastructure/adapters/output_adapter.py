"""nOutput adapter implementation.n"""nnimport loggingnfrom typing import Dict, Anynfrom ...core.application.ports.output_port import OutputPortnfrom ...core.domain.entities import AnalysisResultnfrom ...core.domain.exceptions import OutputErrornnlogger = logging.getLogger(__name__)nnnclass OutputAdapter(OutputPort):n    """n    Adapter implementation for output generation operations.n    n    This is a placeholder implementation that will be expandedn    with actual output generation logic.n    """n    n    async def generate_json_diagnostic(self, analysis_result: AnalysisResult) -> Dict[str, Any]:n        """n        Generate a comprehensive JSON diagnostic from analysis results.n        n        Args:n            analysis_result: Analysis result to convert to JSONn        n        Returns:n            Dictionary containing the JSON diagnosticn        """n        try:n            logger.info(f"Generating JSON diagnostic for fixture: {analysis_result.fixture_id}")n            n            # Use the built-in method from AnalysisResultn            return analysis_result.get_json_diagnostic()n            n        except Exception as e:n            logger.error(f"JSON diagnostic generation failed: {e}")n            raise OutputError(f"JSON diagnostic generation failed: {e}")n    n    n    async def generate_summary_report(self, analysis_result: AnalysisResult) -> str:n        """n        Generate a natural language summary report.n        n        Args:n            analysis_result: Analysis result to summarizen        n        Returns:n            Natural language summary stringn        """n        try:n            logger.info(f"Generating summary report for fixture: {analysis_result.fixture_id}")n            n            # Use the built-in method from AnalysisResultn            return analysis_result.get_summary()n            n        except Exception as e:n            logger.error(f"Summary report generation failed: {e}")n            raise OutputError(f"Summary report generation failed: {e}")n    n    n    async def generate_detailed_report(self, analysis_result: AnalysisResult) -> Dict[str, Any]:n        """n        Generate a detailed report with all analysis information.n        n        Args:n            analysis_result: Analysis result to report onn        n        Returns:n            Dictionary containing the detailed reportn        """n        try:n            logger.info(f"Generating detailed report for fixture: {analysis_result.fixture_id}")n            n            # Use the built-in method from AnalysisResultn            return analysis_result.to_dict()n            n        except Exception as e:n            logger.error(f"Detailed report generation failed: {e}")n            raise OutputError(f"Detailed report generation failed: {e}")n    n    n    async def generate_error_report(self, analysis_result: AnalysisResult) -> Dict[str, Any]:n        """n        Generate a focused report on errors and issues.n        n        Args:n            analysis_result: Analysis result to analyze for errorsn        n        Returns:n            Dictionary containing error reportn        """n        try:n            logger.info(f"Generating error report for fixture: {analysis_result.fixture_id}")n            n            return {n                "fixture_id": analysis_result.fixture_id,n                "analysis_timestamp": analysis_result.analysis_timestamp.isoformat(),n                "errors": analysis_result.error_analysis.to_dict(),n                "summary": "Error analysis completed"n            }n            n        except Exception as e:n            logger.error(f"Error report generation failed: {e}")n            raise OutputError(f"Error report generation failed: {e}")n    n    n    async def generate_consensus_report(self, analysis_result: AnalysisResult) -> Dict[str, Any]:n        """n        Generate a focused report on consensus analysis.n        n        Args:n            analysis_result: Analysis result to analyze for consensusn        n        Returns:n            Dictionary containing consensus reportn        """n        try:n            logger.info(f"Generating consensus report for fixture: {analysis_result.fixture_id}")n            n            return {n                "fixture_id": analysis_result.fixture_id,n                "analysis_timestamp": analysis_result.analysis_timestamp.isoformat(),n                "consensus": analysis_result.consensus_analysis.to_dict(),n                "summary": "Consensus analysis completed"n            }n            n        except Exception as e:n            logger.error(f"Consensus report generation failed: {e}")n            raise OutputError(f"Consensus report generation failed: {e}")n    n    n    async def format_for_export(self, analysis_result: AnalysisResult, n                               format_type: str) -> str:n        """n        Format analysis result for export in various formats.n        n        Args:n            analysis_result: Analysis result to formatn            format_type: Type of format (json, csv, xml, etc.)n        n        Returns:n            Formatted string for exportn        """n        try:n            logger.info(f"Formatting for export: {format_type}")n            n            if format_type.lower() == "json":n                import jsonn                return json.dumps(analysis_result.to_dict(), indent=2, ensure_ascii=False)n            elif format_type.lower() == "csv":n                # TODO: Implement CSV formattingn                return "CSV export not yet implemented"n            elif format_type.lower() == "xml":n                # TODO: Implement XML formattingn                return "XML export not yet implemented"n            else:n                raise ValueError(f"Unsupported format type: {format_type}")n            n        except Exception as e:n            logger.error(f"Export formatting failed: {e}")n            raise OutputError(f"Export formatting failed: {e}")