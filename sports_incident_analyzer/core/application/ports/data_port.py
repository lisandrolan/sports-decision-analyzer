"""nData port interface for accessing fixture data.n"""nnfrom abc import ABC, abstractmethodnfrom typing import Protocol, Optionalnfrom ..domain.entities import Fixture, Incident, Decision, Providernnnclass DataPort(Protocol):n    """n    Port interface for data access operations.n    n    This interface defines the contract for accessing fixture data,n    including incidents, decisions, and provider information.n    """n    n    @abstractmethodn    async def get_fixture_data(self, fixture_id: str) -> Fixture:n        """n        Retrieve complete fixture data including all related entities.n        n        Args:n            fixture_id: Unique identifier for the fixturen        n        Returns:n            Fixture object with all related data loadedn        n        Raises:n            FixtureNotFoundError: If fixture is not foundn            DataAccessError: If there are issues accessing the datan        """n        passn    n    @abstractmethodn    async def get_incidents_by_fixture(self, fixture_id: str) -> list[Incident]:n        """n        Retrieve all incidents for a specific fixture.n        n        Args:n            fixture_id: Unique identifier for the fixturen        n        Returns:n            List of incidents for the fixturen        """n        passn    n    @abstractmethodn    async def get_decisions_by_fixture(self, fixture_id: str) -> list[Decision]:n        """n        Retrieve all decisions for a specific fixture.n        n        Args:n            fixture_id: Unique identifier for the fixturen        n        Returns:n            List of decisions for the fixturen        """n        passn    n    @abstractmethodn    async def get_providers_by_fixture(self, fixture_id: str) -> list[Provider]:n        """n        Retrieve all providers that participated in a fixture.n        n        Args:n            fixture_id: Unique identifier for the fixturen        n        Returns:n            List of providers for the fixturen        """n        passn    n    @abstractmethodn    async def get_raw_messages_by_fixture(self, fixture_id: str) -> list[dict]:n        """n        Retrieve raw messages from providers for a specific fixture.n        n        Args:n            fixture_id: Unique identifier for the fixturen        n        Returns:n            List of raw message dictionariesn        """n        passn    n    @abstractmethodn    async def get_extracted_incidents_by_fixture(self, fixture_id: str) -> list[dict]:n        """n        Retrieve extracted incidents for a specific fixture.n        n        Args:n            fixture_id: Unique identifier for the fixturen        n        Returns:n            List of extracted incident dictionariesn        """n        passn    @abstractmethodn    async def get_decision_results_by_fixture(self, fixture_id: str) -> list[dict]:n        """n        Retrieve decision results for a specific fixture.n        n        Args:n            fixture_id: Unique identifier for the fixturen        n        Returns:n            List of decision result dictionariesn        """n        pass