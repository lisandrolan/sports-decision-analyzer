"""nOutput port interface for generating analysis outputs.n"""nnfrom abc import ABC, abstractmethodnfrom typing import Protocol, Dict, Any, Listnfrom ..domain.entities import AnalysisResultnnnclass OutputPort(Protocol):n    """n    Port interface for output generation operations.n    n    This interface defines the contract for generating variousn    types of output from analysis results.n    """n    n    @abstractmethodn    async def generate_json_diagnostic(self, analysis_result: AnalysisResult) -> Dict[str, Any]:n        """n        Generate a comprehensive JSON diagnostic from analysis results.n        n        Args:n            analysis_result: Analysis result to convert to JSONn        n        Returns:n            Dictionary containing the JSON diagnosticn        """n        passn    n    @abstractmethodn    async def generate_summary_report(self, analysis_result: AnalysisResult) -> str:n        """n        Generate a natural language summary report.n        n        Args:n            analysis_result: Analysis result to summarizen        n        Returns:n            Natural language summary stringn        """n        passn    @abstractmethodn    async def generate_detailed_report(self, analysis_result: AnalysisResult) -> Dict[str, Any]:n        """n        Generate a detailed report with all analysis information.n        n        Args:n            analysis_result: Analysis result to report onn        n        Returns:n            Dictionary containing the detailed reportn        """n        passn    @abstractmethodn    async def generate_error_report(self, analysis_result: AnalysisResult) -> Dict[str, Any]:n        """n        Generate a focused report on errors and issues.n        n        Args:n            analysis_result: Analysis result to analyze for errorsn        n        Returns:n            Dictionary containing error reportn        """n        passn    @abstractmethodn    async def generate_consensus_report(self, analysis_result: AnalysisResult) -> Dict[str, Any]:n        """n        Generate a focused report on consensus analysis.n        n        Args:n            analysis_result: Analysis result to analyze for consensusn        n        Returns:n            Dictionary containing consensus reportn        """n        passn    @abstractmethodn    async def format_for_export(self, analysis_result: AnalysisResult, n                               format_type: str) -> str:n        """n        Format analysis result for export in various formats.n        n        Args:n            analysis_result: Analysis result to formatn            format_type: Type of format (json, csv, xml, etc.)n        n        Returns:n            Formatted string for exportn        """n        pass