"""nNLP port interface for natural language processing operations.n"""nnfrom abc import ABC, abstractmethodnfrom typing import Protocol, Dict, Any, Listnfrom ..domain.entities import AnalysisResultnnnclass ProcessedQuestion:n    """n    Represents a processed natural language question.n    n    Attributes:n        original_question: The original question textn        question_type: Type of question (consensus, provider, timing, etc.)n        extracted_params: Parameters extracted from the questionn        confidence: Confidence level in the processing (0.0 to 1.0)n    """n    def __init__(self, original_question: str, question_type: str, n                 extracted_params: Dict[str, Any], confidence: float = 1.0):n        self.original_question = original_questionn        self.question_type = question_typen        self.extracted_params = extracted_paramsn        self.confidence = confidencennnclass NLPPort(Protocol):n    """n    Port interface for natural language processing operations.n    n    This interface defines the contract for processing naturaln    language questions and generating responses.n    """n    n    @abstractmethodn    async def process_question(self, question: str) -> ProcessedQuestion:n        """n        Process a natural language question and extract parameters.n        n        Args:n            question: Natural language question textn        n        Returns:n            ProcessedQuestion object with extracted informationn        """n        passn    n    @abstractmethodn    async def generate_response(self, question: ProcessedQuestion, n                               analysis_result: AnalysisResult) -> str:n        """n        Generate a natural language response to a question.n        n        Args:n            question: Processed question objectn            analysis_result: Analysis result containing the datan        n        Returns:n            Natural language response stringn        """n        passn    n    @abstractmethodn    async def generate_summary(self, analysis_result: AnalysisResult) -> str:n        """n        Generate a natural language summary of the analysis.n        n        Args:n            analysis_result: Analysis result to summarizen        n        Returns:n            Natural language summary stringn        """n        passn    @abstractmethodn    async def extract_temporal_params(self, question: str) -> Dict[str, Any]:n        """n        Extract temporal parameters from a question.n        n        Args:n            question: Natural language question textn        n        Returns:n            Dictionary with extracted temporal parametersn        """n        passn    @abstractmethodn    async def extract_provider_params(self, question: str) -> Dict[str, Any]:n        """n        Extract provider-related parameters from a question.n        n        Args:n            question: Natural language question textn        n        Returns:n            Dictionary with extracted provider parametersn        """n        passn    @abstractmethodn    async def extract_incident_params(self, question: str) -> Dict[str, Any]:n        """n        Extract incident-related parameters from a question.n        n        Args:n            question: Natural language question textn        n        Returns:n            Dictionary with extracted incident parametersn        """n        pass