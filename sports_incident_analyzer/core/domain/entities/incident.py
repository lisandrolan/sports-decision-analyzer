"""nIncident entity representing a sports incident.n"""nnfrom dataclasses import dataclassnfrom datetime import datetimenfrom typing import Optional, Dict, Anynfrom enum import Enumnnnclass IncidentType(Enum):n    """Types of sports incidents."""n    GOAL = "goal"n    CARD = "card"n    SUBSTITUTION = "substitution"n    INJURY = "injury"n    SCORE_CHANGE = "score_change"n    PERIOD_START = "period_start"n    PERIOD_END = "period_end"n    MATCH_START = "match_start"n    MATCH_END = "match_end"n    OTHER = "other"nnnclass IncidentStatus(Enum):n    """Status of an incident."""n    CONFIRMED = "confirmed"n    PENDING = "pending"n    CANCELLED = "cancelled"n    DISPUTED = "disputed"nnn@dataclassnclass Incident:n    """n    Represents a sports incident that occurred during a fixture.n    n    Attributes:n        incident_id: Unique identifier for the incidentn        fixture_id: ID of the fixture this incident belongs ton        incident_type: Type of incident (goal, card, etc.)n        timestamp: When the incident occurredn        score: Score at the time of the incidentn        provider_id: ID of the provider that reported this incidentn        status: Current status of the incidentn        is_cancelled: Whether the incident was cancelledn        metadata: Additional metadata about the incidentn        confidence: Confidence level in the incident (0.0 to 1.0)n    """n    n    incident_id: strn    fixture_id: strn    incident_type: IncidentTypen    timestamp: datetimen    score: Optional[str] = Nonen    provider_id: Optional[str] = Nonen    status: IncidentStatus = IncidentStatus.CONFIRMEDn    is_cancelled: bool = Falsen    metadata: Dict[str, Any] = Nonen    confidence: float = 1.0n    n    def __post_init__(self):n        """Initialize default values."""n        if self.metadata is None:n            self.metadata = {}n    n    @propertyn    def is_valid(self) -> bool:n        """Check if the incident is valid (not cancelled and confirmed)."""n        return not self.is_cancelled and self.status == IncidentStatus.CONFIRMEDn    n    @propertyn    def is_goal(self) -> bool:n        """Check if this is a goal incident."""n        return self.incident_type == IncidentType.GOALn    n    @propertyn    def is_card(self) -> bool:n        """Check if this is a card incident."""n        return self.incident_type == IncidentType.CARDn    n    @propertyn    def is_substitution(self) -> bool:n        """Check if this is a substitution incident."""n        return self.incident_type == IncidentType.SUBSTITUTIONn    n    def add_metadata(self, key: str, value: Any) -> None:n        """Add metadata to the incident."""n        self.metadata[key] = valuen    n    def get_metadata(self, key: str, default: Any = None) -> Any:n        """Get metadata value by key."""n        return self.metadata.get(key, default)n    n    def update_status(self, new_status: IncidentStatus) -> None:n        """Update the status of the incident."""n        self.status = new_statusn    n    def cancel(self) -> None:n        """Cancel the incident."""n        self.is_cancelled = Truen        self.status = IncidentStatus.CANCELLEDn    n    def to_dict(self) -> Dict[str, Any]:n        """Convert incident to dictionary representation."""n        return {n            "incident_id": self.incident_id,n            "fixture_id": self.fixture_id,n            "incident_type": self.incident_type.value,n            "timestamp": self.timestamp.isoformat(),n            "score": self.score,n            "provider_id": self.provider_id,n            "status": self.status.value,n            "is_cancelled": self.is_cancelled,n            "metadata": self.metadata,n            "confidence": self.confidence,n        }n    n    @classmethodn    def from_dict(cls, data: Dict[str, Any]) -> "Incident":n        """Create incident from dictionary representation."""n        return cls(n            incident_id=data["incident_id"],n            fixture_id=data["fixture_id"],n            incident_type=IncidentType(data["incident_type"]),n            timestamp=datetime.fromisoformat(data["timestamp"]),n            score=data.get("score"),n            provider_id=data.get("provider_id"),n            status=IncidentStatus(data["status"]),n            is_cancelled=data.get("is_cancelled", False),n            metadata=data.get("metadata", {}),n            confidence=data.get("confidence", 1.0),n        )