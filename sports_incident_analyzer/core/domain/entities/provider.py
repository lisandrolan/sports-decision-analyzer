"""nProvider entity representing a data provider.n"""nnfrom dataclasses import dataclassnfrom datetime import datetimenfrom typing import List, Dict, Any, Optionalnfrom enum import Enumnnnclass ProviderStatus(Enum):n    """Status of a provider."""n    ACTIVE = "active"n    INACTIVE = "inactive"n    SUSPENDED = "suspended"n    ERROR = "error"nnnclass ProviderReliability(Enum):n    """Reliability level of a provider."""n    HIGH = "high"n    MEDIUM = "medium"n    LOW = "low"n    UNKNOWN = "unknown"nnn@dataclassnclass Provider:n    """n    Represents a data provider that supplies sports data.n    n    Attributes:n        provider_id: Unique identifier for the providern        name: Human-readable name of the providern        status: Current status of the providern        reliability: Reliability rating of the providern        last_seen: Last time the provider sent datan        total_messages: Total number of messages sentn        success_rate: Success rate of provider messages (0.0 to 1.0)n        metadata: Additional metadata about the providern    """n    n    provider_id: strn    name: strn    status: ProviderStatus = ProviderStatus.ACTIVEn    reliability: ProviderReliability = ProviderReliability.UNKNOWNn    last_seen: Optional[datetime] = Nonen    total_messages: int = 0n    success_rate: float = 1.0n    metadata: Dict[str, Any] = Nonen    n    def __post_init__(self):n        """Initialize default values."""n        if self.metadata is None:n            self.metadata = {}n    n    @propertyn    def is_active(self) -> bool:n        """Check if the provider is currently active."""n        return self.status == ProviderStatus.ACTIVEn    n    @propertyn    def is_reliable(self) -> bool:n        """Check if the provider is considered reliable."""n        return self.reliability in [ProviderReliability.HIGH, ProviderReliability.MEDIUM]n    n    def update_last_seen(self, timestamp: datetime) -> None:n        """Update the last seen timestamp."""n        self.last_seen = timestampn    n    def increment_messages(self) -> None:n        """Increment the total message count."""n        self.total_messages += 1n    n    def update_success_rate(self, success_rate: float) -> None:n        """Update the success rate."""n        self.success_rate = max(0.0, min(1.0, success_rate))n    n    def update_status(self, new_status: ProviderStatus) -> None:n        """Update the provider status."""n        self.status = new_statusn    n    def update_reliability(self, reliability: ProviderReliability) -> None:n        """Update the provider reliability rating."""n        self.reliability = reliabilityn    n    def add_metadata(self, key: str, value: Any) -> None:n        """Add metadata about the provider."""n        self.metadata[key] = valuen    n    def get_metadata(self, key: str, default: Any = None) -> Any:n        """Get metadata value by key."""n        return self.metadata.get(key, default)n    n    def to_dict(self) -> Dict[str, Any]:n        """Convert provider to dictionary representation."""n        return {n            "provider_id": self.provider_id,n            "name": self.name,n            "status": self.status.value,n            "reliability": self.reliability.value,n            "last_seen": self.last_seen.isoformat() if self.last_seen else None,n            "total_messages": self.total_messages,n            "success_rate": self.success_rate,n            "metadata": self.metadata,n        }n    n    @classmethodn    def from_dict(cls, data: Dict[str, Any]) -> "Provider":n        """Create provider from dictionary representation."""n        return cls(n            provider_id=data["provider_id"],n            name=data["name"],n            status=ProviderStatus(data["status"]),n            reliability=ProviderReliability(data["reliability"]),n            last_seen=datetime.fromisoformat(data["last_seen"]) if data.get("last_seen") else None,n            total_messages=data.get("total_messages", 0),n            success_rate=data.get("success_rate", 1.0),n            metadata=data.get("metadata", {}),n        )