"""nFixture entity representing a sports event.n"""nnfrom dataclasses import dataclassnfrom datetime import datetimenfrom typing import List, Optionalnfrom uuid import UUIDnnn@dataclassnclass Fixture:n    """n    Represents a sports fixture/event with all related data.n    n    Attributes:n        fixture_id: Unique identifier for the fixturen        start_time: When the fixture startsn        end_time: When the fixture ends (optional)n        sport_type: Type of sport (e.g., 'football', 'basketball')n        league: League or competition namen        home_team: Home team namen        away_team: Away team namen        status: Current status of the fixturen        incidents: List of incidents that occurred during the fixturen        decisions: List of decisions made by the systemn        providers: List of providers that participatedn    """n    n    fixture_id: strn    start_time: datetimen    end_time: Optional[datetime] = Nonen    sport_type: Optional[str] = Nonen    league: Optional[str] = Nonen    home_team: Optional[str] = Nonen    away_team: Optional[str] = Nonen    status: str = "scheduled"n    incidents: List["Incident"] = Nonen    decisions: List["Decision"] = Nonen    providers: List["Provider"] = Nonen    n    def __post_init__(self):n        """Initialize default values for lists."""n        if self.incidents is None:n            self.incidents = []n        if self.decisions is None:n            self.decisions = []n        if self.providers is None:n            self.providers = []n    n    @propertyn    def is_active(self) -> bool:n        """Check if the fixture is currently active."""n        now = datetime.utcnow()n        return self.start_time <= now <= (self.end_time or now)n    n    @propertyn    def is_completed(self) -> bool:n        """Check if the fixture has ended."""n        if self.end_time is None:n            return Falsen        return datetime.utcnow() > self.end_timen    n    def add_incident(self, incident: "Incident") -> None:n        """Add an incident to the fixture."""n        self.incidents.append(incident)n    n    def add_decision(self, decision: "Decision") -> None:n        """Add a decision to the fixture."""n        self.decisions.append(decision)n    n    def add_provider(self, provider: "Provider") -> None:n        """Add a provider to the fixture."""n        self.providers.append(provider)n    n    def get_incidents_by_type(self, incident_type: str) -> List["Incident"]:n        """Get all incidents of a specific type."""n        return [incident for incident in self.incidents if incident.incident_type == incident_type]n    n    def get_decisions_by_type(self, decision_type: str) -> List["Decision"]:n        """Get all decisions of a specific type."""n        return [decision for decision in self.decisions if decision.decision_type == decision_type]n    n    def get_provider_by_id(self, provider_id: str) -> Optional["Provider"]:n        """Get a provider by its ID."""n        for provider in self.providers:n            if provider.provider_id == provider_id:n                return providern        return None