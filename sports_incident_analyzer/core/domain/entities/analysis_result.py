"""nAnalysis result entity representing the output of fixture analysis.n"""nnfrom dataclasses import dataclassnfrom datetime import datetimenfrom typing import List, Dict, Any, Optionalnfrom .fixture import Fixturenfrom .incident import Incidentnfrom .decision import Decisionnfrom .provider import Providernnn@dataclassnclass ConsensusAnalysis:n    """n    Analysis results for consensus verification.n    n    Attributes:n        verified_consensus: Whether the reported consensus was correctn        provider_agreement: Ratio of providers that actually agreedn        discrepancies: List of discrepancies foundn        consensus_score: The score that providers agreed onn        participating_providers: List of provider IDs that participatedn    """n    verified_consensus: booln    provider_agreement: floatn    discrepancies: List[Dict[str, Any]]n    consensus_score: Optional[str]n    participating_providers: List[str]n    n    def to_dict(self) -> Dict[str, Any]:n        """Convert to dictionary representation."""n        return {n            "verified_consensus": self.verified_consensus,n            "provider_agreement": self.provider_agreement,n            "discrepancies": self.discrepancies,n            "consensus_score": self.consensus_score,n            "participating_providers": self.participating_providers,n        }nnn@dataclassnclass ErrorAnalysis:n    """n    Analysis results for error detection.n    n    Attributes:n        missing_incidents: List of incidents that should have been extractedn        duplicate_incidents: List of duplicate incident extractionsn        incorrect_incidents: List of incorrectly extracted incidentsn        timing_issues: List of temporal inconsistenciesn    """n    missing_incidents: List[Dict[str, Any]]n    duplicate_incidents: List[Dict[str, Any]]n    incorrect_incidents: List[Dict[str, Any]]n    timing_issues: List[Dict[str, Any]]n    n    def to_dict(self) -> Dict[str, Any]:n        """Convert to dictionary representation."""n        return {n            "missing_incidents": self.missing_incidents,n            "duplicate_incidents": self.duplicate_incidents,n            "incorrect_incidents": self.incorrect_incidents,n            "timing_issues": self.timing_issues,n        }nnn@dataclassnclass ComparisonAnalysis:n    """n    Analysis results for provider vs system comparison.n    n    Attributes:n        provider_vs_system: Comparison between provider submissions and system decisionsn        score_discrepancies: List of score discrepancies foundn        decision_validation: Validation results for system decisionsn        logical_inconsistencies: List of logical inconsistencies foundn    """n    provider_vs_system: Dict[str, Any]n    score_discrepancies: List[Dict[str, Any]]n    decision_validation: Dict[str, Any]n    logical_inconsistencies: List[Dict[str, Any]]n    n    def to_dict(self) -> Dict[str, Any]:n        """Convert to dictionary representation."""n        return {n            "provider_vs_system": self.provider_vs_system,n            "score_discrepancies": self.score_discrepancies,n            "decision_validation": self.decision_validation,n            "logical_inconsistencies": self.logical_inconsistencies,n        }nnn@dataclassnclass AnalysisResult:n    """n    Complete analysis result for a fixture.n    n    Attributes:n        fixture_id: ID of the analyzed fixturen        analysis_timestamp: When the analysis was performedn        fixture: Complete fixture data with all related entitiesn        consensus_analysis: Results of consensus verificationn        error_analysis: Results of error detectionn        comparison_analysis: Results of provider vs system comparisonn        summary: Natural language summary of the analysisn        metadata: Additional analysis metadatan    """n    n    fixture_id: strn    analysis_timestamp: datetimen    fixture: Fixturen    consensus_analysis: ConsensusAnalysisn    error_analysis: ErrorAnalysisn    comparison_analysis: ComparisonAnalysisn    summary: strn    metadata: Dict[str, Any] = Nonen    n    def __post_init__(self):n        """Initialize default values."""n        if self.metadata is None:n            self.metadata = {}n    n    def get_json_diagnostic(self) -> Dict[str, Any]:n        """Get complete JSON diagnostic for the analysis."""n        return {n            "fixture_id": self.fixture_id,n            "analysis_timestamp": self.analysis_timestamp.isoformat(),n            "consensus_analysis": self.consensus_analysis.to_dict(),n            "error_analysis": self.error_analysis.to_dict(),n            "comparison_analysis": self.comparison_analysis.to_dict(),n            "metadata": self.metadata,n        }n    n    def get_summary(self) -> str:n        """Get natural language summary of the analysis."""n        return self.summaryn    n    def add_metadata(self, key: str, value: Any) -> None:n        """Add metadata to the analysis result."""n        self.metadata[key] = valuen    n    def get_metadata(self, key: str, default: Any = None) -> Any:n        """Get metadata value by key."""n        return self.metadata.get(key, default)n    n    def to_dict(self) -> Dict[str, Any]:n        """Convert analysis result to dictionary representation."""n        return {n            "fixture_id": self.fixture_id,n            "analysis_timestamp": self.analysis_timestamp.isoformat(),n            "fixture": {n                "fixture_id": self.fixture.fixture_id,n                "start_time": self.fixture.start_time.isoformat(),n                "status": self.fixture.status,n                "incidents_count": len(self.fixture.incidents),n                "decisions_count": len(self.fixture.decisions),n                "providers_count": len(self.fixture.providers),n            },n            "consensus_analysis": self.consensus_analysis.to_dict(),n            "error_analysis": self.error_analysis.to_dict(),n            "comparison_analysis": self.comparison_analysis.to_dict(),n            "summary": self.summary,n            "metadata": self.metadata,n        }