"""nDecision entity representing a system decision.n"""nnfrom dataclasses import dataclassnfrom datetime import datetimenfrom typing import List, Dict, Any, Optionalnfrom enum import Enumnnnclass DecisionType(Enum):n    """Types of system decisions."""n    CONSENSUS = "consensus"n    MAJORITY = "majority"n    AUTOMATIC = "automatic"n    MANUAL = "manual"n    FALLBACK = "fallback"nnnclass DecisionStatus(Enum):n    """Status of a decision."""n    PENDING = "pending"n    CONFIRMED = "confirmed"n    REJECTED = "rejected"n    CANCELLED = "cancelled"n    DISPUTED = "disputed"nnn@dataclassnclass Decision:n    """n    Represents a decision made by the system about a sports incident.n    n    Attributes:n        decision_id: Unique identifier for the decisionn        fixture_id: ID of the fixture this decision relates ton        incident_type: Type of incident the decision is aboutn        decision_type: Type of decision made (consensus, majority, etc.)n        score: Final score decided by the systemn        consensus_providers: Number of providers that agreedn        participating_providers: Total number of providers that participatedn        timestamp: When the decision was maden        status: Current status of the decisionn        metadata: Additional metadata about the decisionn        confidence: Confidence level in the decision (0.0 to 1.0)n    """n    n    decision_id: strn    fixture_id: strn    incident_type: strn    decision_type: DecisionTypen    score: strn    consensus_providers: intn    participating_providers: intn    timestamp: datetimen    status: DecisionStatus = DecisionStatus.CONFIRMEDn    metadata: Dict[str, Any] = Nonen    confidence: float = 1.0n    n    def __post_init__(self):n        """Initialize default values."""n        if self.metadata is None:n            self.metadata = {}n    n    @propertyn    def consensus_ratio(self) -> float:n        """Calculate the ratio of providers in consensus."""n        if self.participating_providers == 0:n            return 0.0n        return self.consensus_providers / self.participating_providersn    n    @propertyn    def is_consensus(self) -> bool:n        """Check if this was a consensus decision."""n        return self.decision_type == DecisionType.CONSENSUSn    n    @propertyn    def is_majority(self) -> bool:n        """Check if this was a majority decision."""n        return self.decision_type == DecisionType.MAJORITYn    n    @propertyn    def is_automatic(self) -> bool:n        """Check if this was an automatic decision."""n        return self.decision_type == DecisionType.AUTOMATICn    n    @propertyn    def is_valid(self) -> bool:n        """Check if the decision is valid (not cancelled or rejected)."""n        return self.status in [DecisionStatus.CONFIRMED, DecisionStatus.PENDING]n    n    def update_status(self, new_status: DecisionStatus) -> None:n        """Update the status of the decision."""n        self.status = new_statusn    n    def add_metadata(self, key: str, value: Any) -> None:n        """Add metadata to the decision."""n        self.metadata[key] = valuen    n    def get_metadata(self, key: str, default: Any = None) -> Any:n        """Get metadata value by key."""n        return self.metadata.get(key, default)n    n    def to_dict(self) -> Dict[str, Any]:n        """Convert decision to dictionary representation."""n        return {n            "decision_id": self.decision_id,n            "fixture_id": self.fixture_id,n            "incident_type": self.incident_type,n            "decision_type": self.decision_type.value,n            "score": self.score,n            "consensus_providers": self.consensus_providers,n            "participating_providers": self.participating_providers,n            "timestamp": self.timestamp.isoformat(),n            "status": self.status.value,n            "metadata": self.metadata,n            "confidence": self.confidence,n        }n    n    @classmethodn    def from_dict(cls, data: Dict[str, Any]) -> "Decision":n        """Create decision from dictionary representation."""n        return cls(n            decision_id=data["decision_id"],n            fixture_id=data["fixture_id"],n            incident_type=data["incident_type"],n            decision_type=DecisionType(data["decision_type"]),n            score=data["score"],n            consensus_providers=data["consensus_providers"],n            participating_providers=data["participating_providers"],n            timestamp=datetime.fromisoformat(data["timestamp"]),n            status=DecisionStatus(data["status"]),n            metadata=data.get("metadata", {}),n            confidence=data.get("confidence", 1.0),n        )