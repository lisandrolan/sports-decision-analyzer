"""nMain entry point for the Sports Incident Analyzer.n"""nnimport asyncionimport loggingnimport sysnfrom pathlib import Pathnfrom typing import Optionalnfrom rich.console import Consolenfrom rich.logging import RichHandlernnfrom .config.settings import Settingsnfrom .infrastructure.adapters.databricks_adapter import DatabricksAdapternfrom .components.agent import SportsIncidentAnalyzernfrom .core.domain.exceptions import SportsIncidentAnalyzerError, ConfigurationErrornn# Configure loggingnlogging.basicConfig(n    level=logging.INFO,n    format="%(message)s",n    datefmt="[%X]",n    handlers=[RichHandler(rich_tracebacks=True)]n)nnlogger = logging.getLogger(__name__)nconsole = Console()nnnasync def main():n    """n    Main entry point for the Sports Incident Analyzer.n    """n    try:n        console.print("[bold blue]Sports Decision Analyzer - LSI Incident Analysis Agent[/bold blue]")n        console.print("=" * 60)n        n        # Load configurationn        console.print("[yellow]Loading configuration...[/yellow]")n        settings = Settings.load()n        settings.validate()n        console.print("[green]✓ Configuration loaded successfully[/green]")n        n        # Initialize adaptersn        console.print("[yellow]Initializing adapters...[/yellow]")n        data_adapter = DatabricksAdapter(n            host=settings.databricks_host,n            token=settings.databricks_token,n            catalog=settings.databricks_catalog,n            schema=settings.databricks_scheman        )n        console.print("[green]✓ Databricks adapter initialized[/green]")n        n        # TODO: Initialize other adapters (Analysis, NLP, Output)n        # For now, we'll create placeholder adaptersn        from .infrastructure.adapters.analysis_adapter import AnalysisAdaptern        from .infrastructure.adapters.nlp_adapter import NLPAdaptern        from .infrastructure.adapters.output_adapter import OutputAdaptern        n        analysis_adapter = AnalysisAdapter()n        nlp_adapter = NLPAdapter()n        output_adapter = OutputAdapter()n        n        console.print("[green]✓ All adapters initialized[/green]")n        n        # Initialize agentn        console.print("[yellow]Initializing agent...[/yellow]")n        agent = SportsIncidentAnalyzer(n            data_port=data_adapter,n            analysis_port=analysis_adapter,n            nlp_port=nlp_adapter,n            output_port=output_adaptern        )n        console.print("[green]✓ Agent initialized successfully[/green]")n        n        # Example usagen        console.print("\n[bold cyan]Example Usage:[/bold cyan]")n        console.print("1. Analyze a fixture: await agent.analyze_fixture('fixture_123')")n        console.print("2. Answer a question: await agent.answer_question('¿Qué pasó?', 'fixture_123')")n        console.print("3. Get JSON diagnostic: await agent.get_json_diagnostic('fixture_123')")n        console.print("4. Get summary: await agent.get_summary('fixture_123')")n        n        # Keep the agent running for interactive usen        console.print("\n[bold green]Agent is ready for use![/bold green]")n        console.print("Press Ctrl+C to exit.")n        n        # Wait for interruptn        try:n            while True:n                await asyncio.sleep(1)n        except KeyboardInterrupt:n            console.print("\n[yellow]Shutting down...[/yellow]")n        finally:n            await agent.close()n            console.print("[green]✓ Agent shut down successfully[/green]")n            n    except ConfigurationError as e:n        console.print(f"[red]Configuration error: {e}[/red]")n        sys.exit(1)n    except SportsIncidentAnalyzerError as e:n        console.print(f"[red]Application error: {e}[/red]")n        sys.exit(1)n    except Exception as e:n        console.print(f"[red]Unexpected error: {e}[/red]")n        logger.exception("Unexpected error in main")n        sys.exit(1)nnnif __name__ == "__main__":n    asyncio.run(main())